package com.guotop.filemanage.view;

import java.io.File;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.guotop.R;
import com.guotop.filemanage.activity.FileManageActivity;
import com.guotop.filemanage.bean.FileBean;
import com.guotop.filemanage.bean.ItemFileMenuButtonBean;
import com.guotop.filemanage.container.SquareContainer;
import com.guotop.filemanage.item.BaseItem;
import com.guotop.filemanage.item.SquareItem;
import com.guotop.filemanage.listener.ItemFileMenuButtonListener;
import com.guotop.filemanage.util.MyFile;

import android.content.Context;
import android.graphics.Color;
import android.view.LayoutInflater;
import android.view.MotionEvent;
import android.view.View;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;

/**
 * 
 * 文件管理器的中间部分
 * 
 *管理界面里面具体的一块
 *
 *@author: 李杨
 *@time: 2013-8-12下午3:43:47
 */
public class FileManageCenterView {

	private FileManageActivity activity;
	private LinearLayout conterLayout;

	List<FileBean> beans;
	List<ItemFileMenuButtonBean> items;
	
	private List<View> rowViews;
	
	private String path;
	
	private  ItemFileMenuButtonListener buttonListener;
	
	private Map<String, ItemFileMenuButtonBean> chooseFileList=new HashMap<String, ItemFileMenuButtonBean>();
	
	
	private boolean editMode=false;
	
	public FileManageCenterView(FileManageActivity fileManageActivity){
		this.activity=fileManageActivity;
		conterLayout = (LinearLayout)fileManageActivity.findViewById(R.id.conterLayout);
		
		buttonListener = new ItemFileMenuButtonListener(){
			public boolean onClick(View v,ItemFileMenuButtonBean bean,boolean isChoose) {
				if(!isEditMode()){
					if(bean.getParams().getFile().isDirectory()){
						onCheckFolder(bean.getParams());
					}else {
						onCheckFile(bean.getParams());
					}
				}else {
					if(isChoose){
						chooseFileList.put(bean.getParams().getFile().getPath(), bean);
						bean.getItem().getListener().onClickChangeItemBackgroud(bean.getItem().getView(),true);
					}else {
						chooseFileList.remove(bean.getParams().getFile().getPath());
						bean.getItem().getListener().onClickChangeItemBackgroud(bean.getItem().getView(),false);
					}
				}
				return super.onClick(v, bean);
			}
			
			public boolean onTouch(View v, MotionEvent event) {
				if(!isEditMode()){
					return true;
				}
				return false;
			}
		};
	}
	
	public void load(String path){
		this.path=path;
		beans = new ArrayList<FileBean>();
		conterLayout.removeAllViews();
		//获取根目录的下所有文件
		File[] files = MyFile.getFileChildrens(path);
		for (File file : files) {
			beans.add(new FileBean(file));
		}
		initSquareItemList();
		for (View view : rowViews) {
			conterLayout.addView(view);
		}
	}
	
	public void initSquareItemList(){
		
		items=new ArrayList<ItemFileMenuButtonBean>();
		for (FileBean fileBean : beans) {
			SquareItem squartItem = new SquareItem(activity, fileBean.getIcon(), fileBean.getFile().getName());
			ItemFileMenuButtonBean buttonBean=new ItemFileMenuButtonBean(squartItem,fileBean,buttonListener);
			items.add(buttonBean);
		}
		rowViews = new SquareContainer(activity, items).getListContainer();
	}
	
	public void initBarItemList(FileBean params){
		
	}


	/**
	 * 点击文件夹
	 * @param params
	 */
	public void onCheckFolder(FileBean params){
		
	}

	/**
	 * 点击文件
	 */
	public void onCheckFile(FileBean params){
		
	}

	public List<ItemFileMenuButtonBean> getItems() {
		return items;
	}


	public void setItems(List<ItemFileMenuButtonBean> items) {
		this.items = items;
	}

	public boolean isEditMode() {
		return editMode;
	}

	public void setEditMode(boolean editMode) {
		this.editMode = editMode;
		if(!editMode){
			
			Set<String> keySet=chooseFileList.keySet();
			for (String key : keySet) {
				BaseItem item=chooseFileList.get(key).getItem();
				item.getListener().onClickChangeItemBackgroud(item.getView(), false);
			}
			
			chooseFileList.clear();
		}
	}
	
	
}
